CREATE DATABASE cake_shop;
use cake_shop;

CREATE TABLE INGREDIENTS
(
	ID_INGREDIENT INT AUTO_INCREMENT,
	NAME VARCHAR(20),
	STOCK INT,
	PRIMARY KEY(ID_INGREDIENT)
)
AUTO_INCREMENT = 3000;

CREATE TABLE PRODUCTS
(
	ID_PRODUCT INT AUTO_INCREMENT,
	NAME VARCHAR(40),
	DESCRIPTION VARCHAR(50),
	PRICE INT,
	MEASURE_UNIT VARCHAR(10),
	MAIN_INGREDIENT INT,
	CATEGORY VARCHAR(100),
	STATUS VARCHAR(50),
	PRIMARY KEY(ID_PRODUCT),
	FOREIGN KEY(MAIN_INGREDIENT) REFERENCES INGREDIENTS(ID_INGREDIENT)
)
AUTO_INCREMENT = 2000;

CREATE TABLE USERS
(
	ID_USER INT AUTO_INCREMENT,
	SURNAME VARCHAR(30),
	FORENAME VARCHAR(30),
	PHONE VARCHAR(15),
	EMAIL VARCHAR(30),
	ADDRESS VARCHAR(50),
	PASSWORD VARCHAR(30),
	IS_ADMIN INT(1),
	PRIMARY KEY(ID_USER)
)
AUTO_INCREMENT = 1000;

CREATE TABLE ORDERS
(
	ID_ORDER INT AUTO_INCREMENT,
	ORDER_DATE DATETIME,
	TOTAL_PRICE INT,
	ID_USER INT,
	QUANTITY INT,
	PRIMARY KEY(ID_ORDER),
	FOREIGN KEY(ID_USER) REFERENCES USERS(ID_USER)
)
AUTO_INCREMENT = 4000;

CREATE TABLE ORDER_LIST
(
	ID INT,
	ID_PRODUCT INT,
	ID_ORDER INT,
	QUANTITY INT,
	PRIMARY KEY(ID),
	FOREIGN KEY(ID_PRODUCT) REFERENCES PRODUCTS(ID_PRODUCT),
	FOREIGN KEY(ID_ORDER) REFERENCES ORDERS(ID_ORDER)
);


CREATE TABLE SESSIONS
(
	ID_SESSION INT AUTO_INCREMENT,
	TOKEN VARCHAR(50),
	ID_USER INT,
	PRIMARY KEY(ID_SESSION),
	FOREIGN KEY(ID_USER) REFERENCES USERS(ID_USER)
)
AUTO_INCREMENT = 5000;

CREATE TABLE MESSAGES
(
	MESSAGE VARCHAR(300)
);

DELIMITER $$

CREATE PROCEDURE add_ingredient(NAME VARCHAR(20), STOCK INT)
BEGIN
	INSERT INTO INGREDIENTS (NAME, STOCK) VALUES (NAME, STOCK);
	COMMIT;
END $$

CREATE PROCEDURE update_ingredient(ID_INGR INT, STOCK_INGR INT)
BEGIN
	UPDATE INGREDIENTS SET STOCK = STOCK_INGR
	WHERE ID_INGREDIENT = ID_INGR;
	COMMIT;
END $$


CREATE PROCEDURE delete_ingredient(ID_INGR INT)
BEGIN
	DELETE FROM INGREDIENTS WHERE ID_INGREDIENT = ID_INGR;
	COMMIT;
END $$

CREATE PROCEDURE select_ingredient(ID_INGR INT)
BEGIN
	SELECT * FROM INGREDIENTS WHERE ID_INGREDIENT = ID_INGR;
END $$

CREATE PROCEDURE select_all_ingredients()
BEGIN
	SELECT * FROM INGREDIENTS;
END $$


CREATE PROCEDURE add_product
(NAME VARCHAR(40), DESCRIPTION VARCHAR(50), PRICE INT, MEASURE_UNIT VARCHAR(10), MAIN_INGREDIENT INT, CATEGORY VARCHAR(100), STATUS VARCHAR(50))
BEGIN
	INSERT INTO PRODUCTS(NAME, DESCRIPTION, PRICE, MEASURE_UNIT, MAIN_INGREDIENT, CATEGORY, STATUS)
	VALUES(NAME, DESCRIPTION, PRICE, MEASURE_UNIT, MAIN_INGREDIENT, CATEGORY, STATUS);
	COMMIT;
END $$

CREATE PROCEDURE delete_product(ID_PROD INT)
BEGIN
	DELETE FROM PRODUCTS WHERE ID_PRODUCT = ID_PROD;
	COMMIT;
END $$

CREATE PROCEDURE select_all_products()
BEGIN
	SELECT * FROM PRODUCTS;
END $$

CREATE PROCEDURE select_product_ingr(INGR_ID INT)
BEGIN
	SELECT * FROM PRODUCTS WHERE MAIN_INGREDIENT = INGR_ID;
END $$

CREATE PROCEDURE select_product_id(ID INT)
BEGIN
	SELECT * FROM PRODUCTS WHERE ID_PRODUCT = ID;
END $$


CREATE PROCEDURE select_product_categ(CATEG_NAME VARCHAR(100))
BEGIN
	SELECT * FROM PRODUCTS WHERE CATEGORY = CATEG_NAME;
END $$

CREATE PROCEDURE select_product_ingr_categ(INGR_ID INT, CATEG_NAME VARCHAR(100))
BEGIN
	SELECT * FROM PRODUCTS WHERE MAIN_INGREDIENT = INGR_ID AND CATEGORY = CATEG_NAME;
END $$

CREATE PROCEDURE group_products_ingr()
BEGIN
	SELECT A.NAME, COUNT(B.NAME) NR_PROD
	FROM INGREDIENTS A, PRODUCTS B
	WHERE B.MAIN_INGREDIENT = A.ID_INGREDIENT
	GROUP BY A.NAME;
END $$

CREATE PROCEDURE group_products_categ()
BEGIN
	SELECT CATEGORY, COUNT(NAME) NR_PROD
	FROM PRODUCTS
	GROUP BY CATEGORY;
END $$


CREATE PROCEDURE add_user
(SURNAME VARCHAR(30), FORENAME VARCHAR(30), PHONE VARCHAR(15), EMAIL VARCHAR(30), ADDRESS VARCHAR(50), PASSWORD VARCHAR(30), IS_ADMIN INT(1))
BEGIN
	INSERT INTO USERS(SURNAME, FORENAME, PHONE, EMAIL, ADDRESS, PASSWORD, IS_ADMIN)
	VALUES(SURNAME, FORENAME, PHONE, EMAIL, ADDRESS, PASSWORD, IS_ADMIN);
	COMMIT;
END $$

CREATE PROCEDURE delete_user(ID INT)
BEGIN
	DELETE FROM USERS WHERE ID_USER = ID;
	COMMIT;
END $$

CREATE PROCEDURE select_user(ID INT)
BEGIN
	SELECT * FROM USERS WHERE ID_USER = ID;
END $$

CREATE PROCEDURE select_all_users()
BEGIN
	SELECT * FROM USERS;
END $$

CREATE PROCEDURE add_order(ORD_DATE DATETIME, TOTAL_PRICE INT, ID_USER INT, QUANTITY INT)
BEGIN
	INSERT INTO MESSAGES(MESSAGE) select CONCAT('Order date is: ', DATE_FORMAT(ORD_DATE, "%Y-%m-%d"));
	INSERT INTO ORDERS(ORDER_DATE, TOTAL_PRICE, ID_USER, QUANTITY)
	VALUES(ORD_DATE, TOTAL_PRICE, ID_USER, QUANTITY);
	COMMIT;
END $$


CREATE FUNCTION get_current_id_cmd() RETURNS INT DETERMINISTIC
BEGIN
	DECLARE ID INT;
	SELECT MAX(ID_ORDER) INTO ID
	FROM ORDERS;
	IF ID IS NULL THEN
		SET ID = 0;
	END IF;
	RETURN ID;
END $$

CREATE PROCEDURE delete_order(ID INT)
BEGIN
	DELETE FROM ORDERS WHERE ID_ORDER = ID;
	COMMIT;
END $$

CREATE PROCEDURE select_all_orders(TOKEN_USER VARCHAR(50))
BEGIN
	DECLARE ID_CLIENT, ADMIN INT;
	SELECT ID_USER INTO ID_CLIENT
	FROM SESSIONS
	WHERE TOKEN = TOKEN_USER;

	SELECT IS_ADMIN INTO ADMIN
	FROM USERS
	WHERE ID_USER = ID_CLIENT;

	IF ADMIN = 1 THEN
		SELECT * FROM ORDERS;
	ELSE
		SELECT * FROM ORDERS WHERE ID_USER = ID_CLIENT;
	END	IF;
END $$

CREATE PROCEDURE select_order_date(ORD_DATE DATE)
BEGIN
	SELECT * FROM ORDERS WHERE DATE_FORMAT(ORDER_DATE, "%Y-%m-%d") >= ORD_DATE;
END $$

CREATE PROCEDURE select_order_price(PRICE INT)
BEGIN
	SELECT * FROM ORDERS WHERE TOTAL_PRICE >= PRICE;
END $$

CREATE PROCEDURE select_order_date_price(ORD_DATE DATE, PRICE INT)
BEGIN
	SELECT * FROM ORDERS WHERE TOTAL_PRICE >= PRICE AND DATE_FORMAT(ORDER_DATE, "%Y-%m-%d") >= ORD_DATE;
END $$

CREATE PROCEDURE add_order_list(ID_LCMD INT, ID_PROD INT, QUANTITY INT, ID_CMD INT)
BEGIN
	INSERT INTO ORDER_LIST(ID, ID_PRODUCT, ID_ORDER, QUANTITY)
	VALUES(ID_LCMD, ID_PROD, ID_CMD, QUANTITY);
	COMMIT;
END $$

CREATE PROCEDURE delete_order_list(ID_CMD INT, ID_PROD INT)
BEGIN
	DELETE FROM ORDER_LIST WHERE ID_ORDER = ID_CMD AND ID_PRODUCT = ID_PROD;
	COMMIT;
END $$

CREATE PROCEDURE select_order_id_ord(ID_CMD INT)
BEGIN
	SELECT * FROM ORDER_LIST WHERE ID_ORDER = ID_CMD;
END $$

CREATE PROCEDURE select_all_order_list()
BEGIN
	SELECT * FROM ORDER_LIST;
END $$

CREATE PROCEDURE add_session(TOKEN VARCHAR(50), ID_USER INT)
BEGIN
	INSERT INTO SESSIONS(TOKEN, ID_USER)
	VALUES(TOKEN, ID_USER);
	COMMIT;
END $$

CREATE PROCEDURE delete_session(ID INT)
BEGIN
	DELETE FROM SESSIONS WHERE ID_USER = ID;
	COMMIT;
END $$

CREATE PROCEDURE select_session(ID INT)
BEGIN
	SELECT * FROM SESSIONS WHERE ID_USER = ID;
END $$

CREATE PROCEDURE select_all_sessions()
BEGIN
	SELECT * FROM SESSIONS;
END $$

CREATE FUNCTION test_session(ID INT) RETURNS INT DETERMINISTIC
BEGIN
	DECLARE ID_1 INT DEFAULT 0;
	SELECT ID_USER INTO ID_1
	FROM SESSIONS
	WHERE ID_USER = ID;
	RETURN ID_1;
END $$

CREATE PROCEDURE delete_session_token(TOKEN_USER VARCHAR(50))
BEGIN
	DELETE FROM SESSIONS WHERE TOKEN = TOKEN_USER;
	COMMIT;
END $$



CREATE TRIGGER TGR_ORDER_LIST
	AFTER INSERT ON ORDER_LIST
    FOR EACH ROW
BEGIN
	DECLARE QUANTITY_CMD, PRICE_PROD, STOCK_INGR, MAIN_INGR INT;

	SELECT QUANTITY INTO QUANTITY_CMD
	FROM ORDERS
	WHERE ID_ORDER = NEW.ID_ORDER;

	SELECT PRICE INTO PRICE_PROD
	FROM PRODUCTS
	WHERE ID_PRODUCT = NEW.ID_PRODUCT;

	SELECT MAIN_INGREDIENT INTO MAIN_INGR
	FROM PRODUCTS
	WHERE ID_PRODUCT = NEW.ID_PRODUCT;

	SELECT STOCK INTO STOCK_INGR
	FROM INGREDIENTS
	WHERE ID_INGREDIENT = MAIN_INGR;

	UPDATE ORDERS SET TOTAL_PRICE = QUANTITY_CMD * PRICE_PROD
	WHERE ID_ORDER = NEW.ID_ORDER;

	UPDATE INGREDIENTS SET STOCK = STOCK_INGR - QUANTITY_CMD
	WHERE ID_INGREDIENT = MAIN_INGR;

	IF STOCK_INGR - QUANTITY_CMD <= 0 THEN
		UPDATE PRODUCTS SET STATUS = 'unavailable'
		WHERE MAIN_INGREDIENT = MAIN_INGR;
	END IF;

	INSERT INTO MESSAGES(MESSAGE) VALUES(CONCAT('S-a inserat o comanda in lista de comenzi! Comanda are id-ul: ', NEW.ID_ORDER));

END $$

CREATE TRIGGER TGR_INGREDIENTS
	AFTER UPDATE ON INGREDIENTS
    FOR EACH ROW
BEGIN
	IF NEW.STOCK > 0 THEN
		UPDATE PRODUCTS SET STATUS = 'available'
		WHERE MAIN_INGREDIENT = NEW.ID_INGREDIENT;
	END IF;
END $$

DELIMITER ;
